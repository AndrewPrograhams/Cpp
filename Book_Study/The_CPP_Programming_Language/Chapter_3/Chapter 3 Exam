1. Code a class to represent a complex type. Overload its basic arithmetic operators. Define it's +=, etc. operators.
-Use doubles as its real and imaginary parts
-Make three constructors, none provided parts should be initialized to 0.
    -Real and imaginary parts provided
    -Real provided
    -Neither provdied

2. Add the following functionality to the Vector container class defined thus far. Assume push_back has been defined elsewhere.
-A working destructor
-Initialize all elements of the container to 0
-A read(&istream s) function that sets values based on user input. Assume a default constructor for v exists. Comment out this code.
-A constructor that initializes from a {}-type expression. Use inlining to define this constructor. Use the copy() function from <algorithm>

3. Code a simple container interface, then define a vector container that inherits from it.
-Include a constructor, operator[], and size function.

4. Expand the vector class by adding an assignment constructor and a copy constructor.
-Make their declarations in the .h file and their implementations in the .cpp file

5. Further expand the vector class by adding a move constructor and move operator.
-Make their declarations in the .h file and their implementations in the .cpp file

Test questions.

1. What overhead does a virtual method have?


